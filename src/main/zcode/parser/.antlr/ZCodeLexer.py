# Generated from d://NLNNLT//Zcode2//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,50,379,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,
        1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,
        1,42,1,42,3,42,275,8,42,1,42,3,42,278,8,42,1,43,4,43,281,8,43,11,
        43,12,43,282,1,44,1,44,5,44,287,8,44,10,44,12,44,290,9,44,1,45,1,
        45,3,45,294,8,45,1,45,4,45,297,8,45,11,45,12,45,298,1,46,1,46,1,
        46,1,46,1,46,1,46,5,46,307,8,46,10,46,12,46,310,9,46,1,46,1,46,1,
        46,1,47,1,47,1,47,3,47,318,8,47,1,48,1,48,5,48,322,8,48,10,48,12,
        48,325,9,48,1,49,1,49,1,49,1,49,5,49,331,8,49,10,49,12,49,334,9,
        49,1,49,1,49,1,50,4,50,339,8,50,11,50,12,50,340,1,50,1,50,1,51,1,
        51,1,51,1,51,1,51,1,51,5,51,351,8,51,10,51,12,51,354,9,51,1,51,1,
        51,1,51,3,51,359,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,5,
        52,369,8,52,10,52,12,52,372,9,52,1,52,1,52,1,52,1,53,1,53,1,53,0,
        0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,
        0,93,44,95,0,97,45,99,46,101,47,103,48,105,49,107,50,1,0,13,1,0,
        48,57,1,0,46,46,2,0,69,69,101,101,2,0,43,43,45,45,1,0,34,34,4,0,
        10,10,12,13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,
        114,116,116,1,0,12,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,2,0,10,10,12,13,3,0,8,9,12,13,32,32,1,1,10,10,394,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,93,1,0,0,0,0,97,1,0,0,0,0,99,1,0,
        0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,
        1,0,0,0,3,116,1,0,0,0,5,121,1,0,0,0,7,128,1,0,0,0,9,135,1,0,0,0,
        11,139,1,0,0,0,13,147,1,0,0,0,15,152,1,0,0,0,17,156,1,0,0,0,19,162,
        1,0,0,0,21,165,1,0,0,0,23,171,1,0,0,0,25,180,1,0,0,0,27,183,1,0,
        0,0,29,188,1,0,0,0,31,193,1,0,0,0,33,199,1,0,0,0,35,203,1,0,0,0,
        37,207,1,0,0,0,39,211,1,0,0,0,41,214,1,0,0,0,43,216,1,0,0,0,45,218,
        1,0,0,0,47,220,1,0,0,0,49,222,1,0,0,0,51,224,1,0,0,0,53,226,1,0,
        0,0,55,229,1,0,0,0,57,232,1,0,0,0,59,234,1,0,0,0,61,237,1,0,0,0,
        63,239,1,0,0,0,65,242,1,0,0,0,67,246,1,0,0,0,69,249,1,0,0,0,71,251,
        1,0,0,0,73,253,1,0,0,0,75,255,1,0,0,0,77,257,1,0,0,0,79,259,1,0,
        0,0,81,261,1,0,0,0,83,266,1,0,0,0,85,272,1,0,0,0,87,280,1,0,0,0,
        89,284,1,0,0,0,91,291,1,0,0,0,93,300,1,0,0,0,95,317,1,0,0,0,97,319,
        1,0,0,0,99,326,1,0,0,0,101,338,1,0,0,0,103,344,1,0,0,0,105,362,1,
        0,0,0,107,376,1,0,0,0,109,110,5,110,0,0,110,111,5,117,0,0,111,112,
        5,109,0,0,112,113,5,98,0,0,113,114,5,101,0,0,114,115,5,114,0,0,115,
        2,1,0,0,0,116,117,5,98,0,0,117,118,5,111,0,0,118,119,5,111,0,0,119,
        120,5,108,0,0,120,4,1,0,0,0,121,122,5,115,0,0,122,123,5,116,0,0,
        123,124,5,114,0,0,124,125,5,105,0,0,125,126,5,110,0,0,126,127,5,
        103,0,0,127,6,1,0,0,0,128,129,5,114,0,0,129,130,5,101,0,0,130,131,
        5,116,0,0,131,132,5,117,0,0,132,133,5,114,0,0,133,134,5,110,0,0,
        134,8,1,0,0,0,135,136,5,118,0,0,136,137,5,97,0,0,137,138,5,114,0,
        0,138,10,1,0,0,0,139,140,5,100,0,0,140,141,5,121,0,0,141,142,5,110,
        0,0,142,143,5,97,0,0,143,144,5,109,0,0,144,145,5,105,0,0,145,146,
        5,99,0,0,146,12,1,0,0,0,147,148,5,102,0,0,148,149,5,117,0,0,149,
        150,5,110,0,0,150,151,5,99,0,0,151,14,1,0,0,0,152,153,5,102,0,0,
        153,154,5,111,0,0,154,155,5,114,0,0,155,16,1,0,0,0,156,157,5,117,
        0,0,157,158,5,110,0,0,158,159,5,116,0,0,159,160,5,105,0,0,160,161,
        5,108,0,0,161,18,1,0,0,0,162,163,5,98,0,0,163,164,5,121,0,0,164,
        20,1,0,0,0,165,166,5,98,0,0,166,167,5,114,0,0,167,168,5,101,0,0,
        168,169,5,97,0,0,169,170,5,107,0,0,170,22,1,0,0,0,171,172,5,99,0,
        0,172,173,5,111,0,0,173,174,5,110,0,0,174,175,5,116,0,0,175,176,
        5,105,0,0,176,177,5,110,0,0,177,178,5,117,0,0,178,179,5,101,0,0,
        179,24,1,0,0,0,180,181,5,105,0,0,181,182,5,102,0,0,182,26,1,0,0,
        0,183,184,5,101,0,0,184,185,5,108,0,0,185,186,5,115,0,0,186,187,
        5,101,0,0,187,28,1,0,0,0,188,189,5,101,0,0,189,190,5,108,0,0,190,
        191,5,105,0,0,191,192,5,102,0,0,192,30,1,0,0,0,193,194,5,98,0,0,
        194,195,5,101,0,0,195,196,5,103,0,0,196,197,5,105,0,0,197,198,5,
        110,0,0,198,32,1,0,0,0,199,200,5,101,0,0,200,201,5,110,0,0,201,202,
        5,100,0,0,202,34,1,0,0,0,203,204,5,110,0,0,204,205,5,111,0,0,205,
        206,5,116,0,0,206,36,1,0,0,0,207,208,5,97,0,0,208,209,5,110,0,0,
        209,210,5,100,0,0,210,38,1,0,0,0,211,212,5,111,0,0,212,213,5,114,
        0,0,213,40,1,0,0,0,214,215,5,43,0,0,215,42,1,0,0,0,216,217,5,45,
        0,0,217,44,1,0,0,0,218,219,5,42,0,0,219,46,1,0,0,0,220,221,5,47,
        0,0,221,48,1,0,0,0,222,223,5,37,0,0,223,50,1,0,0,0,224,225,5,61,
        0,0,225,52,1,0,0,0,226,227,5,60,0,0,227,228,5,45,0,0,228,54,1,0,
        0,0,229,230,5,33,0,0,230,231,5,61,0,0,231,56,1,0,0,0,232,233,5,60,
        0,0,233,58,1,0,0,0,234,235,5,60,0,0,235,236,5,61,0,0,236,60,1,0,
        0,0,237,238,5,62,0,0,238,62,1,0,0,0,239,240,5,62,0,0,240,241,5,61,
        0,0,241,64,1,0,0,0,242,243,5,46,0,0,243,244,5,46,0,0,244,245,5,46,
        0,0,245,66,1,0,0,0,246,247,5,61,0,0,247,248,5,61,0,0,248,68,1,0,
        0,0,249,250,5,40,0,0,250,70,1,0,0,0,251,252,5,41,0,0,252,72,1,0,
        0,0,253,254,5,91,0,0,254,74,1,0,0,0,255,256,5,93,0,0,256,76,1,0,
        0,0,257,258,5,44,0,0,258,78,1,0,0,0,259,260,5,10,0,0,260,80,1,0,
        0,0,261,262,5,116,0,0,262,263,5,114,0,0,263,264,5,117,0,0,264,265,
        5,101,0,0,265,82,1,0,0,0,266,267,5,102,0,0,267,268,5,97,0,0,268,
        269,5,108,0,0,269,270,5,115,0,0,270,271,5,101,0,0,271,84,1,0,0,0,
        272,274,3,87,43,0,273,275,3,89,44,0,274,273,1,0,0,0,274,275,1,0,
        0,0,275,277,1,0,0,0,276,278,3,91,45,0,277,276,1,0,0,0,277,278,1,
        0,0,0,278,86,1,0,0,0,279,281,7,0,0,0,280,279,1,0,0,0,281,282,1,0,
        0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,88,1,0,0,0,284,288,7,1,0,
        0,285,287,7,0,0,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,
        0,288,289,1,0,0,0,289,90,1,0,0,0,290,288,1,0,0,0,291,293,7,2,0,0,
        292,294,7,3,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,
        295,297,7,0,0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,
        298,299,1,0,0,0,299,92,1,0,0,0,300,308,7,4,0,0,301,307,8,5,0,0,302,
        303,5,92,0,0,303,307,7,6,0,0,304,305,5,39,0,0,305,307,5,34,0,0,306,
        301,1,0,0,0,306,302,1,0,0,0,306,304,1,0,0,0,307,310,1,0,0,0,308,
        306,1,0,0,0,308,309,1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,
        312,7,4,0,0,312,313,6,46,0,0,313,94,1,0,0,0,314,318,7,7,0,0,315,
        316,5,92,0,0,316,318,8,6,0,0,317,314,1,0,0,0,317,315,1,0,0,0,318,
        96,1,0,0,0,319,323,7,8,0,0,320,322,7,9,0,0,321,320,1,0,0,0,322,325,
        1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,98,1,0,0,0,325,323,1,
        0,0,0,326,327,5,35,0,0,327,328,5,35,0,0,328,332,1,0,0,0,329,331,
        8,10,0,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,
        1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,336,6,49,1,0,336,100,
        1,0,0,0,337,339,7,11,0,0,338,337,1,0,0,0,339,340,1,0,0,0,340,338,
        1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,343,6,50,1,0,343,102,
        1,0,0,0,344,352,7,4,0,0,345,351,8,5,0,0,346,347,5,92,0,0,347,351,
        7,6,0,0,348,349,5,39,0,0,349,351,5,34,0,0,350,345,1,0,0,0,350,346,
        1,0,0,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,
        1,0,0,0,353,358,1,0,0,0,354,352,1,0,0,0,355,356,5,13,0,0,356,359,
        5,10,0,0,357,359,7,12,0,0,358,355,1,0,0,0,358,357,1,0,0,0,359,360,
        1,0,0,0,360,361,6,51,2,0,361,104,1,0,0,0,362,370,7,4,0,0,363,369,
        8,5,0,0,364,365,5,92,0,0,365,369,7,6,0,0,366,367,5,39,0,0,367,369,
        5,34,0,0,368,363,1,0,0,0,368,364,1,0,0,0,368,366,1,0,0,0,369,372,
        1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,
        1,0,0,0,373,374,3,95,47,0,374,375,6,52,3,0,375,106,1,0,0,0,376,377,
        9,0,0,0,377,378,6,53,4,0,378,108,1,0,0,0,18,0,274,277,282,288,293,
        298,306,308,317,323,332,340,350,352,358,368,370,5,1,46,0,6,0,0,1,
        51,1,1,52,2,1,53,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER = 1
    BOOL = 2
    STRING = 3
    RETURN = 4
    VAR = 5
    DYNAMIC = 6
    FUNC = 7
    FOR = 8
    UNTIL = 9
    BY = 10
    BREAK = 11
    CONTINUE = 12
    IF = 13
    ELSE = 14
    ELIF = 15
    BEGIN = 16
    END = 17
    NOT = 18
    AND = 19
    OR = 20
    PLUS = 21
    MINUS = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQ_STR = 26
    ASSIGN = 27
    DIFFER = 28
    LT = 29
    LE = 30
    GT = 31
    GE = 32
    CONCAT = 33
    EQ_NUM = 34
    LP = 35
    RP = 36
    LS = 37
    RS = 38
    COMMA = 39
    NEWLINE = 40
    TRUE = 41
    FALSE = 42
    NUM_LIT = 43
    STR_LIT = 44
    ID = 45
    COMMENT = 46
    WS = 47
    UNCLOSE_STRING = 48
    ILLEGAL_ESCAPE = 49
    ERROR_CHAR = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'return'", "'var'", "'dynamic'", 
            "'func'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'else'", "'elif'", "'begin'", "'end'", "'not'", "'and'", 
            "'or'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'<-'", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'...'", "'=='", "'('", "')'", 
            "'['", "']'", "','", "'\\n'", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", "FUNC", 
            "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", 
            "BEGIN", "END", "NOT", "AND", "OR", "PLUS", "MINUS", "MUL", 
            "DIV", "MOD", "EQ_STR", "ASSIGN", "DIFFER", "LT", "LE", "GT", 
            "GE", "CONCAT", "EQ_NUM", "LP", "RP", "LS", "RS", "COMMA", "NEWLINE", 
            "TRUE", "FALSE", "NUM_LIT", "STR_LIT", "ID", "COMMENT", "WS", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", 
                  "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", 
                  "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "PLUS", 
                  "MINUS", "MUL", "DIV", "MOD", "EQ_STR", "ASSIGN", "DIFFER", 
                  "LT", "LE", "GT", "GE", "CONCAT", "EQ_NUM", "LP", "RP", 
                  "LS", "RS", "COMMA", "NEWLINE", "TRUE", "FALSE", "NUM_LIT", 
                  "INT_PART", "DEC_PART", "EXP_PART", "STR_LIT", "ILL_ESC_CHAR", 
                  "ID", "COMMENT", "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", 
                  "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[46] = self.STR_LIT_action 
            actions[51] = self.UNCLOSE_STRING_action 
            actions[52] = self.ILLEGAL_ESCAPE_action 
            actions[53] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            	if (len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
            		raise UncloseString(self.text[1:-2])
            	elif (self.text[-1] == '\n'):
            		raise UncloseString(self.text[1:-1])
            	else:
            		raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	raise IllegalEscape(self.text[1:])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


