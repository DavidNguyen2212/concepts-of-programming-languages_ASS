# Generated from d://NLNNLT//Zcode//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,390,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,39,1,39,1,39,3,39,267,8,39,1,40,1,40,5,40,
        271,8,40,10,40,12,40,274,9,40,1,41,1,41,3,41,278,8,41,1,42,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,3,44,293,
        8,44,1,44,3,44,296,8,44,1,45,4,45,299,8,45,11,45,12,45,300,1,46,
        1,46,5,46,305,8,46,10,46,12,46,308,9,46,1,47,1,47,3,47,312,8,47,
        1,47,4,47,315,8,47,11,47,12,47,316,1,48,1,48,1,48,1,48,1,48,1,48,
        5,48,325,8,48,10,48,12,48,328,9,48,1,48,1,48,1,48,1,49,1,49,1,49,
        3,49,336,8,49,1,50,1,50,1,50,1,50,5,50,342,8,50,10,50,12,50,345,
        9,50,1,50,1,50,1,51,4,51,350,8,51,11,51,12,51,351,1,51,1,51,1,52,
        1,52,1,52,1,52,1,52,1,52,5,52,362,8,52,10,52,12,52,365,9,52,1,52,
        1,52,1,52,3,52,370,8,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,
        5,53,380,8,53,10,53,12,53,383,9,53,1,53,1,53,1,53,1,54,1,54,1,54,
        0,0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
        91,0,93,0,95,0,97,46,99,0,101,47,103,48,105,49,107,50,109,51,1,0,
        13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        1,0,46,46,2,0,69,69,101,101,2,0,43,43,45,45,1,0,34,34,4,0,10,10,
        12,13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,
        116,116,1,0,12,13,2,0,10,10,12,13,3,0,8,9,12,12,32,32,1,1,10,10,
        407,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,97,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,0,109,1,0,0,0,1,111,1,0,0,0,3,118,1,0,0,0,5,123,1,0,0,0,7,130,
        1,0,0,0,9,137,1,0,0,0,11,141,1,0,0,0,13,149,1,0,0,0,15,154,1,0,0,
        0,17,158,1,0,0,0,19,164,1,0,0,0,21,167,1,0,0,0,23,173,1,0,0,0,25,
        182,1,0,0,0,27,185,1,0,0,0,29,190,1,0,0,0,31,195,1,0,0,0,33,201,
        1,0,0,0,35,205,1,0,0,0,37,209,1,0,0,0,39,213,1,0,0,0,41,216,1,0,
        0,0,43,218,1,0,0,0,45,220,1,0,0,0,47,222,1,0,0,0,49,224,1,0,0,0,
        51,226,1,0,0,0,53,228,1,0,0,0,55,231,1,0,0,0,57,234,1,0,0,0,59,236,
        1,0,0,0,61,239,1,0,0,0,63,241,1,0,0,0,65,244,1,0,0,0,67,248,1,0,
        0,0,69,251,1,0,0,0,71,253,1,0,0,0,73,255,1,0,0,0,75,257,1,0,0,0,
        77,259,1,0,0,0,79,266,1,0,0,0,81,268,1,0,0,0,83,277,1,0,0,0,85,279,
        1,0,0,0,87,284,1,0,0,0,89,290,1,0,0,0,91,298,1,0,0,0,93,302,1,0,
        0,0,95,309,1,0,0,0,97,318,1,0,0,0,99,335,1,0,0,0,101,337,1,0,0,0,
        103,349,1,0,0,0,105,355,1,0,0,0,107,373,1,0,0,0,109,387,1,0,0,0,
        111,112,5,110,0,0,112,113,5,117,0,0,113,114,5,109,0,0,114,115,5,
        98,0,0,115,116,5,101,0,0,116,117,5,114,0,0,117,2,1,0,0,0,118,119,
        5,98,0,0,119,120,5,111,0,0,120,121,5,111,0,0,121,122,5,108,0,0,122,
        4,1,0,0,0,123,124,5,115,0,0,124,125,5,116,0,0,125,126,5,114,0,0,
        126,127,5,105,0,0,127,128,5,110,0,0,128,129,5,103,0,0,129,6,1,0,
        0,0,130,131,5,114,0,0,131,132,5,101,0,0,132,133,5,116,0,0,133,134,
        5,117,0,0,134,135,5,114,0,0,135,136,5,110,0,0,136,8,1,0,0,0,137,
        138,5,118,0,0,138,139,5,97,0,0,139,140,5,114,0,0,140,10,1,0,0,0,
        141,142,5,100,0,0,142,143,5,121,0,0,143,144,5,110,0,0,144,145,5,
        97,0,0,145,146,5,109,0,0,146,147,5,105,0,0,147,148,5,99,0,0,148,
        12,1,0,0,0,149,150,5,102,0,0,150,151,5,117,0,0,151,152,5,110,0,0,
        152,153,5,99,0,0,153,14,1,0,0,0,154,155,5,102,0,0,155,156,5,111,
        0,0,156,157,5,114,0,0,157,16,1,0,0,0,158,159,5,117,0,0,159,160,5,
        110,0,0,160,161,5,116,0,0,161,162,5,105,0,0,162,163,5,108,0,0,163,
        18,1,0,0,0,164,165,5,98,0,0,165,166,5,121,0,0,166,20,1,0,0,0,167,
        168,5,98,0,0,168,169,5,114,0,0,169,170,5,101,0,0,170,171,5,97,0,
        0,171,172,5,107,0,0,172,22,1,0,0,0,173,174,5,99,0,0,174,175,5,111,
        0,0,175,176,5,110,0,0,176,177,5,116,0,0,177,178,5,105,0,0,178,179,
        5,110,0,0,179,180,5,117,0,0,180,181,5,101,0,0,181,24,1,0,0,0,182,
        183,5,105,0,0,183,184,5,102,0,0,184,26,1,0,0,0,185,186,5,101,0,0,
        186,187,5,108,0,0,187,188,5,115,0,0,188,189,5,101,0,0,189,28,1,0,
        0,0,190,191,5,101,0,0,191,192,5,108,0,0,192,193,5,105,0,0,193,194,
        5,102,0,0,194,30,1,0,0,0,195,196,5,98,0,0,196,197,5,101,0,0,197,
        198,5,103,0,0,198,199,5,105,0,0,199,200,5,110,0,0,200,32,1,0,0,0,
        201,202,5,101,0,0,202,203,5,110,0,0,203,204,5,100,0,0,204,34,1,0,
        0,0,205,206,5,110,0,0,206,207,5,111,0,0,207,208,5,116,0,0,208,36,
        1,0,0,0,209,210,5,97,0,0,210,211,5,110,0,0,211,212,5,100,0,0,212,
        38,1,0,0,0,213,214,5,111,0,0,214,215,5,114,0,0,215,40,1,0,0,0,216,
        217,5,43,0,0,217,42,1,0,0,0,218,219,5,45,0,0,219,44,1,0,0,0,220,
        221,5,42,0,0,221,46,1,0,0,0,222,223,5,47,0,0,223,48,1,0,0,0,224,
        225,5,37,0,0,225,50,1,0,0,0,226,227,5,61,0,0,227,52,1,0,0,0,228,
        229,5,60,0,0,229,230,5,45,0,0,230,54,1,0,0,0,231,232,5,33,0,0,232,
        233,5,61,0,0,233,56,1,0,0,0,234,235,5,60,0,0,235,58,1,0,0,0,236,
        237,5,60,0,0,237,238,5,61,0,0,238,60,1,0,0,0,239,240,5,62,0,0,240,
        62,1,0,0,0,241,242,5,62,0,0,242,243,5,61,0,0,243,64,1,0,0,0,244,
        245,5,46,0,0,245,246,5,46,0,0,246,247,5,46,0,0,247,66,1,0,0,0,248,
        249,5,61,0,0,249,250,5,61,0,0,250,68,1,0,0,0,251,252,5,40,0,0,252,
        70,1,0,0,0,253,254,5,41,0,0,254,72,1,0,0,0,255,256,5,91,0,0,256,
        74,1,0,0,0,257,258,5,93,0,0,258,76,1,0,0,0,259,260,5,44,0,0,260,
        78,1,0,0,0,261,267,5,10,0,0,262,263,5,13,0,0,263,264,5,10,0,0,264,
        265,1,0,0,0,265,267,6,39,0,0,266,261,1,0,0,0,266,262,1,0,0,0,267,
        80,1,0,0,0,268,272,7,0,0,0,269,271,7,1,0,0,270,269,1,0,0,0,271,274,
        1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,82,1,0,0,0,274,272,1,
        0,0,0,275,278,3,85,42,0,276,278,3,87,43,0,277,275,1,0,0,0,277,276,
        1,0,0,0,278,84,1,0,0,0,279,280,5,116,0,0,280,281,5,114,0,0,281,282,
        5,117,0,0,282,283,5,101,0,0,283,86,1,0,0,0,284,285,5,102,0,0,285,
        286,5,97,0,0,286,287,5,108,0,0,287,288,5,115,0,0,288,289,5,101,0,
        0,289,88,1,0,0,0,290,292,3,91,45,0,291,293,3,93,46,0,292,291,1,0,
        0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,296,3,95,47,0,295,294,1,
        0,0,0,295,296,1,0,0,0,296,90,1,0,0,0,297,299,7,2,0,0,298,297,1,0,
        0,0,299,300,1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,92,1,0,0,
        0,302,306,7,3,0,0,303,305,7,2,0,0,304,303,1,0,0,0,305,308,1,0,0,
        0,306,304,1,0,0,0,306,307,1,0,0,0,307,94,1,0,0,0,308,306,1,0,0,0,
        309,311,7,4,0,0,310,312,7,5,0,0,311,310,1,0,0,0,311,312,1,0,0,0,
        312,314,1,0,0,0,313,315,7,2,0,0,314,313,1,0,0,0,315,316,1,0,0,0,
        316,314,1,0,0,0,316,317,1,0,0,0,317,96,1,0,0,0,318,326,7,6,0,0,319,
        325,8,7,0,0,320,321,5,92,0,0,321,325,7,8,0,0,322,323,5,39,0,0,323,
        325,5,34,0,0,324,319,1,0,0,0,324,320,1,0,0,0,324,322,1,0,0,0,325,
        328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,329,1,0,0,0,328,
        326,1,0,0,0,329,330,7,6,0,0,330,331,6,48,1,0,331,98,1,0,0,0,332,
        336,7,9,0,0,333,334,5,92,0,0,334,336,8,8,0,0,335,332,1,0,0,0,335,
        333,1,0,0,0,336,100,1,0,0,0,337,338,5,35,0,0,338,339,5,35,0,0,339,
        343,1,0,0,0,340,342,8,10,0,0,341,340,1,0,0,0,342,345,1,0,0,0,343,
        341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,
        347,6,50,2,0,347,102,1,0,0,0,348,350,7,11,0,0,349,348,1,0,0,0,350,
        351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,
        354,6,51,2,0,354,104,1,0,0,0,355,363,7,6,0,0,356,362,8,7,0,0,357,
        358,5,92,0,0,358,362,7,8,0,0,359,360,5,39,0,0,360,362,5,34,0,0,361,
        356,1,0,0,0,361,357,1,0,0,0,361,359,1,0,0,0,362,365,1,0,0,0,363,
        361,1,0,0,0,363,364,1,0,0,0,364,369,1,0,0,0,365,363,1,0,0,0,366,
        367,5,13,0,0,367,370,5,10,0,0,368,370,7,12,0,0,369,366,1,0,0,0,369,
        368,1,0,0,0,370,371,1,0,0,0,371,372,6,52,3,0,372,106,1,0,0,0,373,
        381,7,6,0,0,374,380,8,7,0,0,375,376,5,92,0,0,376,380,7,8,0,0,377,
        378,5,39,0,0,378,380,5,34,0,0,379,374,1,0,0,0,379,375,1,0,0,0,379,
        377,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,
        384,1,0,0,0,383,381,1,0,0,0,384,385,3,99,49,0,385,386,6,53,4,0,386,
        108,1,0,0,0,387,388,9,0,0,0,388,389,6,54,5,0,389,110,1,0,0,0,20,
        0,266,272,277,292,295,300,306,311,316,324,326,335,343,351,361,363,
        369,379,381,6,1,39,0,1,48,1,6,0,0,1,52,2,1,53,3,1,54,4
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER = 1
    BOOL = 2
    STRING = 3
    RETURN = 4
    VAR = 5
    DYNAMIC = 6
    FUNC = 7
    FOR = 8
    UNTIL = 9
    BY = 10
    BREAK = 11
    CONTINUE = 12
    IF = 13
    ELSE = 14
    ELIF = 15
    BEGIN = 16
    END = 17
    NOT = 18
    AND = 19
    OR = 20
    PLUS = 21
    MINUS = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQ_STR = 26
    ASSIGN = 27
    DIFFER = 28
    LT = 29
    LE = 30
    GT = 31
    GE = 32
    CONCAT = 33
    EQ_NUM = 34
    LP = 35
    RP = 36
    LS = 37
    RS = 38
    COMMA = 39
    NEWLINE = 40
    ID = 41
    BOO_LIT = 42
    TRUE = 43
    FALSE = 44
    NUM_LIT = 45
    STR_LIT = 46
    COMMENT = 47
    WS = 48
    UNCLOSE_STRING = 49
    ILLEGAL_ESCAPE = 50
    ERROR_CHAR = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'number'", "'bool'", "'string'", "'return'", "'var'", "'dynamic'", 
            "'func'", "'for'", "'until'", "'by'", "'break'", "'continue'", 
            "'if'", "'else'", "'elif'", "'begin'", "'end'", "'not'", "'and'", 
            "'or'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'<-'", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'...'", "'=='", "'('", "')'", 
            "'['", "']'", "','", "'true'", "'false'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", "FUNC", 
            "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", 
            "BEGIN", "END", "NOT", "AND", "OR", "PLUS", "MINUS", "MUL", 
            "DIV", "MOD", "EQ_STR", "ASSIGN", "DIFFER", "LT", "LE", "GT", 
            "GE", "CONCAT", "EQ_NUM", "LP", "RP", "LS", "RS", "COMMA", "NEWLINE", 
            "ID", "BOO_LIT", "TRUE", "FALSE", "NUM_LIT", "STR_LIT", "COMMENT", 
            "WS", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "NUMBER", "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", 
                  "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", "IF", 
                  "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "PLUS", 
                  "MINUS", "MUL", "DIV", "MOD", "EQ_STR", "ASSIGN", "DIFFER", 
                  "LT", "LE", "GT", "GE", "CONCAT", "EQ_NUM", "LP", "RP", 
                  "LS", "RS", "COMMA", "NEWLINE", "ID", "BOO_LIT", "TRUE", 
                  "FALSE", "NUM_LIT", "INT_PART", "DEC_PART", "EXP_PART", 
                  "STR_LIT", "ILL_ESC_CHAR", "COMMENT", "WS", "UNCLOSE_STRING", 
                  "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[39] = self.NEWLINE_action 
            actions[48] = self.STR_LIT_action 
            actions[52] = self.UNCLOSE_STRING_action 
            actions[53] = self.ILLEGAL_ESCAPE_action 
            actions[54] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = '\n'
     

    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	if (len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
            		raise UncloseString(self.text[1:-2])
            	elif (self.text[-1] == '\n'):
            		raise UncloseString(self.text[1:-1])
            	else:
            		raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

            	raise IllegalEscape(self.text[1:])

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            raise ErrorToken(self.text)
     


